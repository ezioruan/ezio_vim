Include: helper.vader

Before:
  let g:Handle = esearch#buf#import()
  call setline(1, ['l0', 'l1', 'l2'])
  let g:file = 'spec/fixtures/file.txt'
  let g:cwd = 'spec/fixtures/buf/'
  let g:original_options = esearch#let#restorable({'&confirm': 0})

After:
  call g:original_options.restore()

Execute (.for sets buffer attributes):
  let g:buf = g:Handle.for(bufnr(Fixture(g:file, ['line1', 'line2'])))
Then:
  AssertEqual g:buf.bufnr, bufnr(g:file)
  AssertEqual g:buf.filename, g:file
  Assert g:buf.existed

Execute (initialized with .for can be written):
  let bufnr = bufnr(Fixture(g:file, ['line1', 'line2']))
  exe 'buffer' bufnr
  call setbufvar(bufnr, '&buflisted', 0)
  let g:buf = g:Handle.for(bufnr)
Then:
  call g:buf.setline(1, 'changed')
  Assert getbufvar(g:buf.bufnr, '&modified')
  $tabnew
  call g:buf.write(1)
  Assert !getbufvar(g:buf.bufnr, '&modified')

Execute (.new sets buffer attributes):
  let g:buf = g:Handle.new(Fixture(g:file, ['line1', 'line2']))
Then:
  AssertEqual g:buf.bufnr, bufnr(g:file)
  AssertEqual g:buf.filename, g:file

Execute(.new handles paths with the same prefix):
  let bufname1 = Fixture(g:cwd.'prefix_the_same_as_in_buf2', ['line1'])
  let bufname2 = Fixture(g:cwd.'prefix', ['line2'])
  exe 'bwipeout!' bufname1 | exe 'bwipeout!' bufname2
  let g:buf1 = g:Handle.new(bufname1)
  let g:buf2 = g:Handle.new(bufname2)
Then:
  AssertEqual g:buf1.getline(1), 'line1'
  AssertEqual g:buf2.getline(1), 'line2'

Execute (.new sets .existed = 0 when the buffer didn't exist):
  exe 'bwipeout' Fixture(g:file, ['line1', 'line2'])
  let g:buf = g:Handle.new(g:file)
Then:
  AssertEqual g:buf.existed, 0

Execute (.new sets .existed = 1 when the buffer existed):
  let g:buf = g:Handle.new(Fixture(g:file, ['line1', 'line2']))
Then:
  AssertEqual g:buf.existed, 1

Execute (.oneliner returns true if the buffer contains n lines):
  let g:buf = g:Handle.new(Fixture(g:file, repeat(['line'], Rand(5, 10))))
Then:
  Assert !g:buf.oneliner()

Execute (.oneliner returns true if the buffer contains 1 line):
  let g:buf = g:Handle.new(Fixture(g:file, ['line']))
Then:
  Assert g:buf.oneliner()

Execute (.oneliner returns true if the buffer contains no lines):
  let g:buf = g:Handle.new(Fixture(g:file, []))
Then:
  Assert g:buf.oneliner()

Execute (.getline returns 1-indexed line context):
  let g:buf = g:Handle.new(bufname(''))
Then:
  AssertEqual g:buf.getline(1), 'l0'
  AssertEqual g:buf.getline(2), 'l1'
  AssertEqual g:buf.getline(3), 'l2'

Execute(.setline sets a single line):
  let g:buf = g:Handle.new(bufname(''))
  call g:buf.setline(1, 'changed')
Then:
  AssertEqual getbufline(g:buf.bufnr, 1, '$'), ['changed', 'l1', 'l2',]

Execute (.appendlines appends lines after the last line):
  let g:buf = g:Handle.new(bufname(''))
  call g:buf.appendline(3, ['appended3', 'appended4'])
Then:
  AssertEqual getbufline(g:buf.bufnr, 1, '$'), ['l0', 'l1', 'l2', 'appended3', 'appended4']

Execute (.appendlines appends lines before the first line):
  let g:buf = g:Handle.new(bufname(''))
  call g:buf.appendline(0, ['appended0', 'appended1'])
Then:
  AssertEqual getbufline(g:buf.bufnr, 1, '$'), ['appended0', 'appended1', 'l0', 'l1', 'l2']

Execute (.open opens the buffer with the opener):
  let g:buf = g:Handle.new(bufname(''))
  let tabs_count_was = tabpagenr('$')
  call g:buf.open('tabnew')
Then:
  AssertEqual tabs_count_was, tabpagenr('$') - 1
  AssertEqual g:buf.bufnr, bufnr('')
  AssertEqual g:buf.filename, bufname('')

Execute (.write without "!" when existing isn't changed):
  let g:buf = g:Handle.new(Fixture(g:file, ['line1', 'line2']))
  call g:buf.goto()
  call g:buf.setline(1, 'changed')
  $tabnew
Then:
  Assert getbufvar(g:buf.bufnr, '&modified')
  silent call g:buf.write(0)
  Assert !getbufvar(g:buf.bufnr, '&modified')

Execute (.write with "!" when existing isn't changed):
  let g:buf = g:Handle.new(Fixture(g:file, ['line1', 'line2']))
  call g:buf.goto()
  call g:buf.setline(1, 'changed')
  $tabnew
Then:
  Assert getbufvar(g:buf.bufnr, '&modified')
  silent call g:buf.write(1)
  Assert !getbufvar(g:buf.bufnr, '&modified')

Execute (.bdelete without "!" when not modified):
  let g:buf = g:Handle.new(Fixture(g:file, ['line1', 'line2']))
  call g:buf.goto()
  $tabnew
  silent call g:buf.bdelete(0)
Then:
  Assert bufexists(g:buf.bufnr)
  Assert !buflisted(g:buf.bufnr)
  Assert !bufloaded(g:buf.bufnr)

Execute (.bdelete without "!" when modified):
  let g:buf = g:Handle.new(Fixture(g:file, ['line1', 'line2']))
  call g:buf.goto()
  call g:buf.setline(1, 'changed')
  $tabnew
  silent call g:buf.bdelete(0)
Then:
  Assert bufexists(g:buf.bufnr)
  Assert buflisted(g:buf.bufnr)
  Assert bufloaded(g:buf.bufnr)

Execute (.bdelete with "!" when modified):
  let g:buf = g:Handle.new(Fixture(g:file, ['line1', 'line2']))
  call g:buf.goto()
  call g:buf.setline(1, 'changed')
  $tabnew
  silent call g:buf.bdelete(1)
Then:
  Assert bufexists(g:buf.bufnr)
  Assert !buflisted(g:buf.bufnr)
  Assert !bufloaded(g:buf.bufnr)

Execute (.bwipeout without "!" when not modified):
  let g:buf = g:Handle.new(Fixture(g:file, ['line1', 'line2']))
  $tabnew
  silent call g:buf.bwipeout(0)
Then:
  Assert !bufexists(g:buf.bufnr)
  Assert !buflisted(g:buf.bufnr)
  Assert !bufloaded(g:buf.bufnr)

Execute (.bwipeout without "!" when modified):
  let g:buf = g:Handle.new(Fixture(g:file, ['line1', 'line2']))
  call g:buf.goto()
  call g:buf.setline(1, 'changed')
  $tabnew
  silent call g:buf.bwipeout(0)
Then:
  Assert bufexists(g:buf.bufnr)
  Assert buflisted(g:buf.bufnr)
  Assert bufloaded(g:buf.bufnr)

Execute (.bdelete with "!" when modified):
  let g:buf = g:Handle.new(Fixture(g:file, ['line1', 'line2']))
  call g:buf.goto()
  call g:buf.setline(1, 'changed')
  $tabnew
  silent call g:buf.bwipeout(1)
Then:
  Assert !bufexists(g:buf.bufnr)
  Assert !buflisted(g:buf.bufnr)
  Assert !bufloaded(g:buf.bufnr)
